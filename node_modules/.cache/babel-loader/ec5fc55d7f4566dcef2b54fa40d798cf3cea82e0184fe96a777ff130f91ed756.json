{"ast":null,"code":"import { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  files\n} = window.data;\nexport const File = ({\n  file = files\n}) => {\n  if (file.type === `folder`) {\n    console.log(`Folder`);\n    for (const key in file) {\n      if (key === `folder`) {\n        continue;\n      }\n    }\n    Object.entries(file).map(([key, value]) => {\n      console.log(`${key}: ${JSON.stringify(value)}`);\n    });\n  } else {\n    console.log(`Else`);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Files\"\n  }, void 0, false);\n};\n_c = File;\nvar _c;\n$RefreshReg$(_c, \"File\");","map":{"version":3,"names":["files","window","data","File","file","type","console","log","key","Object","entries","map","value","JSON","stringify","_jsxDEV","_Fragment","children","_c","$RefreshReg$"],"sources":["/home/jakub/projects/git/deathengine/src/editor/files/File.jsx"],"sourcesContent":["const { files } = window.data\n\nexport const File = ({ file = files }) => {\n  if(file.type === `folder`) {\n    console.log(`Folder`)\n    for(const key in file) {\n      if(key === `folder`) {\n        continue\n      }\n    }\n\n    Object.entries(file).map(([key, value]) => {\n      console.log(`${key}: ${JSON.stringify(value)}`)\n    })\n  } else {\n    console.log(`Else`)\n  }\n\n  return <>\n    Files\n  </>\n}"],"mappings":";AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,MAAM,CAACC,IAAI;AAE7B,OAAO,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI,GAAGJ;AAAM,CAAC,KAAK;EACxC,IAAGI,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;IACzBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,KAAI,MAAMC,GAAG,IAAIJ,IAAI,EAAE;MACrB,IAAGI,GAAG,KAAK,QAAQ,EAAE;QACnB;MACF;IACF;IAEAC,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,CAACO,GAAG,CAAC,CAAC,CAACH,GAAG,EAAEI,KAAK,CAAC,KAAK;MACzCN,OAAO,CAACC,GAAG,CAAC,GAAGC,GAAG,KAAKK,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,EAAE,CAAC;IACjD,CAAC,CAAC;EACJ,CAAC,MAAM;IACLN,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACrB;EAEA,oBAAOQ,OAAA,CAAAC,SAAA;IAAAC,QAAA,EAAE;EAET,gBAAE,CAAC;AACL,CAAC;AAAAC,EAAA,GAnBYf,IAAI;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}