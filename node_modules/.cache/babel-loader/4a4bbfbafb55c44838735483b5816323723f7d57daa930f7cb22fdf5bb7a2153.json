{"ast":null,"code":"export const optymalizeJs = text => {\n  return text.replace(/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/g, ``) // Remove comments\n  .split(`\\n`) // Split into lines\n  .map(line => line.trim()) // Trim lines\n  .filter(line => line !== '') // Remove empty lines\n  .map(line => line.replace(/\\s*([({[])\\s*/g, `$1`)) // Remove spaces before brackets\n  .join(`\\n`) // Join lines\n  .replace(/\\s{2,}/g, ` `); // Replace multiple spaces with a single space\n};","map":{"version":3,"names":["optymalizeJs","text","replace","split","map","line","trim","filter","join"],"sources":["/home/jakub/projects/git/deathengine/src/build/optymalizeJs.js"],"sourcesContent":["export const optymalizeJs = (text) => {\n  return text\n    .replace(/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/g, ``) // Remove comments\n    .split(`\\n`) // Split into lines\n    .map(line => line.trim()) // Trim lines\n    .filter(line => line !== '') // Remove empty lines\n    .map(line => line.replace(/\\s*([({[])\\s*/g, `$1`)) // Remove spaces before brackets\n    .join(`\\n`) // Join lines\n    .replace(/\\s{2,}/g, ` `) // Replace multiple spaces with a single space\n}"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EACpC,OAAOA,IAAI,CACRC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;EAAA,CACxCC,KAAK,CAAC,IAAI,CAAC,CAAC;EAAA,CACZC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EAAA,CACzBC,MAAM,CAACF,IAAI,IAAIA,IAAI,KAAK,EAAE,CAAC,CAAC;EAAA,CAC5BD,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACH,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;EAAA,CAClDM,IAAI,CAAC,IAAI,CAAC,CAAC;EAAA,CACXN,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}